---
label: Janushash
---
# Janushash - A Proof of Balanced Work Mining Algorithm
## What is Proof of Balanced Work?
Proof of Balanced Work (PoBW) is a novel method to base proof of work on a combination of multiple hash functions. Traditionally, only a single hash function is used for proof of work, such as double SHA256 for Bitcoin.

However it is possible to extend the concept of proof of work to multiple hash functions. This technique was first published in October 2023 by CoinFu Master Shifu in his work "[Proof of Balanced Work - The Theory of Mining Hash Products](https://github.com/CoinFuMasterShifu/ProofOfBalancedWork/blob/main/PoBW.pdf)". 

The method works by combining multiple hashes of different hash functions to *hash products* via multiplication, where the hashes are interpreted as numbers between 0 and 1. Mining such combinations
- will not suffer from bottlenecks,
- requires each component hash function to be efficiently computed and
- can therefore be used for example to create new mining algorithms that require both a capable CPU and GPU for efficient mining.

Miner developers are strongly encouraged to read this paper since it describes how classical PoW concepts transfer to the PoBW setting, analyzes best mining approaches and provides examples which contribute to a deeper understanding, in particularly why efficient mining of hash products requires mining resources to be appropriately balanced among the involved hash functions.


## What is Janushash?
Janushash is a particularly simple incarnation of Proof of Balanced Work because it only combines two different hash functions via a product. We have chosen two fast hash functions: Triple SHA256 and VerusHash v2.1. VerusHash v2.1 is mined particularly efficiently on smartphones, or generally ARM based devices and also on CPUs. On the other hand Triple SHA256 can be most efficiently computed on ASICS, however the multiplicative combination with VerusHash v2.1 will force miners to resort to GPUs since high bandwidth between the hardware mining VerusHash v2.1 is necessary to form hash products at high rate.

Therefore it is expected that the most efficient way to mine Janushash is a CPU/GPU combination. In this sense Janushash is the first proof of work algorithm which requires both, CPU and GPU capabilities at the same time. This fact coined the name "Janushash". 

The goal of using this PoBW mining algorithm is to avoid harmful centralization in mining, neither GPU farms with poor CPUs nor CPU mining farms shall be able to efficiently mine this algorithm, instead the "little guys" shall be in the focus of mining.

From a high-level perspective computing a Janushash works by first computing both, the triple SHA256 hash and the Verushash v2.1 of an input byte sequence, and finally combining these two hashes into a new hash by multiplication:
<p align="center">
  <img src="/img/janus.svg" style="width:500px;"/>
</p>

The multiplication is done as if the two computed hashes were floating-point numbers between 0 and 1. The next section explains how exactly this is done.

## Specific implementation in Warthog

For PoBW verification a both hashes, Triple SHA256 and Verushash v2.1 are computed. Then both are converted into a custom floating-point format called `HashExponentialDigest`:

Warthog Network uses a [Proof of Balanced Work](https://github.com/CoinFuMasterShifu/ProofOfBalancedWork/blob/main/PoBW.pdf) mining algorithm. This is a completely new concept in the crypto space. It is possible to combine two or more proof of work algorithms multiplicatively. We have chosen two: Sha256t and Verushash v2.1. The specific mining algorithm that is used by Warthog is [Janushash](https://github.com/CoinFuMasterShifu/Janushash). For a block to be valid the following two conditions must be met:

1. Sha256t(header) > c for some hard-coded constant c.
2. Verushash(header)*Sha256t(header)^0.7 < t for the target t.

Hashes are interpreted as fixed-point numbers between 0 and 1. Therefore exponentiation to power 0.7 and multiplication is defined. There is some hard math behind these concepts, for example:
- Does classical retargeting work here? -> Yes.
- How to mine this thing efficiently? -> Compute Verushash (slower hashrate) only on args with smallest Sha256t > c.
- How to compute mining efficiency in terms of Sha256t and Verushash hashrate? -> [See here](https://github.com/CoinFuMasterShifu/Janushash#janusscore---a-formula-to-determine-mining-efficiency)

 The essential insight in combining hashes multiplicatively is that there is no bottleneck as in combining them via chaining different hash functions. Different devices can work in parallel to compute different hash functions on the same input. 




